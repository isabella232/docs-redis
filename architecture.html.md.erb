---
title: On-Demand Service Offering
owner: London Services
---

<%= partial '../../redis/partials/services/deprecation-notice-eogs' %>

<strong><%= modified_date %></strong>

Redis for PCF offers On-Demand, Dedicated-VM, and Shared-VM service plans.
This section describes the architecture, lifecycle, and configurations of the on-demand plan,
as well as networking information for the on-demand service.
For similar information about the Dedicated-VM and Shared-VM plans, see [Dedicated-VM and Shared-VM Service Offerings](./architecture-pp.html).

<%= partial 'note-dedicated-instances' %>

## <a id="diagram1"></a> Architecture Diagram for On-Demand Plan

This diagram shows the architecture of the service broker and on-demand plans and how the user's app binds to a Redis instance.

![On-Demand Architecture Diagram](on-demand-arch.png)

## <a id="on-demand"></a> On-Demand Service Plans

### <a id="cacheplans"></a> Three On-Demand Cache Plans

On-demand plans are best fit for cache use cases and are configured as such by default.

Redis for PCF offers three on-demand plans as the `p.redis` service within the PCF Redis tile. Below is a description of each plan as it appears in the Marketplace and its intended use case.

* **Small Cache Plan**: A Redis instance deployed to a dedicated VM, suggested to be configured with about 1&nbsp;GB of memory and more than 2.5&nbsp;GB of persistent disk.
* **Medium Cache Plan**: A Redis instance deployed to a dedicated VM, suggested to be configured with about 2&nbsp;GB of memory and more than 5&nbsp;GB of persistent disk.
* **Large Cache**: A Redis instance deployed to a dedicated VM, suggested to be configured with about 4&nbsp;GB of memory and more than 10&nbsp;GB of persistent disk.

For each service plan, the operator can configure the **Plan name**, **Plan description**, **Server VM type** and **Server Disk type**, or choose to disable the plan completely.
Set the persistent disk size to at least 2.5 times the memory of the instance.

### <a id="features"></a> Features of On-Demand Service Plans

* Each on-demand service instance is deployed to its own VM and is suitable for production workloads.
* The service plans are operator-configured and enabled. Once enabled, app developers can view the available plans in the Marketplace and provision a Redis instance from that plan.
* Operators can update the cache plan settings, including the VM size and disk size, after the plans have been created.
* Operators and app developers can change certain Redis configurations from the default.
See [Configuration for On-Demand Service Plans](#config) for more information.
* The default `maxmemory-policy` is `allkeys-lru` and can be updated for other cache policies.
* The maximum number of instances is managed by a per-plan and global quota.
For information on setting quotas, see [Setting Limits for On-Demand Service Instances](./set-quotas.html).


## <a id="config"></a> Configuration of On-Demand Service Plans

For on-demand plans, certain Redis configurations can be set by the operator during plan configuration,
 and by the app developer during instance provisioning. Other Redis configurations cannot be changed from the default.

### <a id="operator"></a> Operator Configurable Redis Settings

The Redis settings that an operator can configure in the tile UI include:

* Redis Client Timeout
* Redis TCP Keepalive
* Max Clients
* Lua Scripting
* Plan Quota

For more information, see [Additional Redis Configurations](./installing.html#configurations).

### <a id="appdev"></a> App Developer Configurable Redis Settings

The Redis settings that an app developer can configure include:

* `maxmemory-policy`
* `notify-keyspace-events`
* `slowlog-log-slower-than`
* `slowlog-max-len`.

For more information, see [Customize an On-Demand Service Instance](./using.html#custom).

### <a id="opnotes"></a> Operator Notes for On-Demand Service Plans

* Instances of the on-demand plan can be deployed until their number reaches
either an operator-set per-plan quota or a global quota.
For information on setting quotas, see [Setting Limits for On-Demand Service Instances](./set-quotas.html).
* Instances are provisioned based on the [On-Demand Services SDK](http://docs.pivotal.io/on-demand-service-broker/)
and service broker adapter associated with this plan.
* `maxmemory` in `redis.conf` is set to 45% of the system memory.
* Any on-demand plan can be disabled from the plan page in Ops Manager.

### <a id="limitations"></a> Known Limitations for On-Demand Service Plans

Limitations for the On-Demand Service include:

* Operators must not downsize the VMs or disk size as this can cause data loss in pre-existing instances.

* Operators can update certain plan settings after the plans have been created. To ensure upgrades happen across all instances, set the **upgrade instances** errand to **On**.

* If the operator updates the VM size, disk size, or the Redis configuration settings
  (enabling Lua Scripting, max-clients, timeout, and TCP keep-alive),
  these settings are implemented in all instances already created.


## <a id ="lifecycle"></a>Lifecycle for On-Demand Service Plan

Here is the lifecycle of Redis for PCF, from an operator installing the tile through an app developer using the service then an operator deleting the tile.

![On-Demand Lifecycle Diagram](Redis_timeline_demand.png)
