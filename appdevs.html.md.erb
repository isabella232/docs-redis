---
title: Introduction for App Developers
owner: London Services
---

<strong><%= modified_date %></strong>

This section introduces Redis for Pivotal Cloud Foundry (PCF) services for developers
and links to more information.

For instructions on creating, binding to, and deleting an instance of the On-Demand,
or Shared-VM plan, see [Using Redis for PCF](./using.html).


## <a id="services"></a>  Redis for PCF Services

<%= partial 'service-offerings' %>

For more information about the plans, see the [On-Demand Service Offering](./architecture.html)
and the [Shared-VM Service Offering](./architecture-pp.html).

##  <a id="getting-started"></a>Getting Started

### <a id="spring"></a>Using Redis for PCF with Spring
<a href="http://cloud.spring.io/spring-cloud-connectors/spring-cloud-spring-service-connector.html#_redis">Spring Cloud Connectors</a>
can connect to Redis for PCF.
<a href="http://cloud.spring.io/spring-cloud-connectors/spring-cloud-cloud-foundry-connector.html#_redis">Spring Cloud Cloud Foundry connectors</a>
automatically connect to Redis for PCF.

To view an example Spring app demonstrating Redis as a cache with failover,
see the <a href="https://github.com/pivotal-cf/redis-reference-architecture">Example Spring App</a>
in GitHub.

###  <a id="pcf-dev"></a>PCF Dev
PCF Dev is a small footprint version of PCF that's small enough to run on a local
developer machine.
For more information, see https://pivotal.io/pcf-dev.

###  <a id="example-app"></a>Redis Example App
Sample ruby code that uses PCF can be found here
<a href="https://github.com/pivotal-cf/cf-redis-example-app">https://github.com/pivotal-cf/cf-redis-example-app</a>.

###  <a id="redis"></a>Redis
To learn more about Redis itself, see <a href="http://redis.io">redis.io</a>.

##  <a id="using-tls"></a>Using TLS

###  <a id="check-availability-tls"></a>Check availability

It is possible to check if TLS has been enabled on the on-demand Redis service by inspecting the service key. 
This can be achieved through the following steps:
<ol>
    <li>Create a service key with the command <pre class=terminal>$ cf create-service-key MY-INSTANCE MY_KEY</pre></li>
    <li>Display the service key with the command <pre class=terminal>$ cf service-key MY-INSTANCE MY_KEY</pre>.<br>
        This will return a JSON response:<br> 
    <pre class=terminal>{
            "host": "q-s0.redis-instance.ENVIRONMENT_NAME-services-subnet.service-instance-GUID.bosh",
            "password": "secret",
            "port": unsecure port,
            "tls_port": secure port
        }
        </pre>    
    </li>
</ol>
If you do not see the "tls_port" field then TLS has not been enabled on your Redis service.
