---
title: Introduction for App Developers
owner: London Services
---

<strong><%= modified_date %></strong>

This section introduces Redis for Pivotal Cloud Foundry (PCF) services for developers
and links to more information.

For instructions on creating, binding to, and deleting an instance of the On-Demand,
or Shared-VM plan, see [Using Redis for PCF](./using.html).


## <a id="services"></a>  Redis for PCF Services

<%= partial 'service-offerings' %>

For more information about the plans, see the [On-Demand Service Offering](./architecture.html)
and the [Shared-VM Service Offering](./architecture-pp.html).

##  <a id="getting-started"></a>Getting Started

### <a id="spring"></a>Using Redis for PCF with Spring
<a href="http://cloud.spring.io/spring-cloud-connectors/spring-cloud-spring-service-connector.html#_redis">Spring Cloud Connectors</a>
can connect to Redis for PCF.
<a href="http://cloud.spring.io/spring-cloud-connectors/spring-cloud-cloud-foundry-connector.html#_redis">Spring Cloud Cloud Foundry connectors</a>
automatically connect to Redis for PCF.

To view an example Spring app demonstrating Redis as a cache with failover,
see the <a href="https://github.com/pivotal-cf/redis-reference-architecture">Example Spring App</a>
in GitHub.

### <a id="steeltoe"></a>Using Redis for PCF with Steeltoe
<a href="https://steeltoe.io/docs/steeltoe-connectors/#5-0-redis">Steeltoe Cloud Connectors</a>
can connect to Redis for PCF.

To view examples of Steeltoe apps using Redis as a cache with failover,
see the <a href="https://github.com/pivotal-cf/RedisReferenceArchitectureSteeltoe">Example Steeltoe App</a>
repository in GitHub.

<p class="note warning"><strong>Warning</strong>:
  The Steeltoe connector for Redis requires Redis for PCF to support Lua scripting.
  By default, Lua scripting is disabled for Redis for PCF, but a PCF operator can
  change the setting to enable it.
</p>

###  <a id="pcf-dev"></a>PCF Dev
PCF Dev is a small footprint version of PCF that's small enough to run on a local
developer machine.
For more information, see https://pivotal.io/pcf-dev.

###  <a id="example-app"></a>Redis Example App
Sample ruby code that uses PCF can be found here
<a href="https://github.com/pivotal-cf/cf-redis-example-app">https://github.com/pivotal-cf/cf-redis-example-app</a>.

###  <a id="redis"></a>Redis
To learn more about Redis itself, see <a href="http://redis.io">redis.io</a>.

##  <a id="using-tls"></a>Using TLS

###  <a id="check-availability-tls"></a>Check availability

It is possible to check if TLS has been enabled on the on-demand Redis service by inspecting the service key.
This can be achieved through the following steps:
<ol>
    <li>Create a service key with the command <pre class=terminal>$ cf create-service-key MY-INSTANCE MY_KEY</pre></li>
    <li>Display the service key with the command <pre class=terminal>$ cf service-key MY-INSTANCE MY_KEY</pre>.<br>
        This will return a JSON response:<br>
    <pre class=terminal>{
            "host": "q-s0.redis-instance.ENVIRONMENT_NAME-services-subnet.service-instance-GUID.bosh",
            "password": "secret",
            "port": unsecure port,
            "tls_port": secure port
        }
        </pre>
    </li>
</ol>
If you do not see the "tls_port" field then TLS has not been enabled on your Redis service.

###  <a id="app-binding-tls"></a>App binding with TLS

For any new apps the command <pre class=terminal>$ cf bind-service</pre> will automatically expose both TLS and non-secure ports.
Spring and Steeltoe apps will default to TLS when available.

For Spring apps, it is necessary to use Java CFEnv version 1.1.0 or later. See [Redis Spring Boot Reference Architecture](https://github.com/pivotal-cf/redis-reference-architecture).

For Steeltoe apps, it is necessary to use Steeltoe 2.3.0 or later. See [Redis Steeltoe Reference Architecture](https://github.com/pivotal-cf/RedisReferenceArchitectureSteeltoe).

When using custom connectors both ports will be available to the app developer to choose from.

For an example of manually selecting the TLS port in Ruby:

<pre>
require 'redis'
require 'cf-app-utils'

def redis_credentials
  service_name = ENV['service_name'] || "redis"
  if ENV['VCAP_SERVICES']
      all_pivotal_redis_credentials = CF::App::Credentials.find_all_by_all_service_tags(['redis', 'pivotal'])
      if all_pivotal_redis_credentials && all_pivotal_redis_credentials.first
          all_pivotal_redis_credentials.first
      else
          redis_service_credentials = CF::App::Credentials.find_by_service_name(service_name)
          redis_service_credentials
      end
  end
end

def redis_client
   @client ||= Redis.new(
     host: redis_credentials.fetch('host'),
     port: redis_credentials.fetch('tls_port'),
     password: redis_credentials.fetch('password'),
     ssl: true,
     timeout: 30
end
</pre>

For existing apps you will need to remove the current binding and re-bind to the Redis instance.
This can be achieved with the following commands:<br>
<pre class=terminal>$ cf unbind-service APP_NAME SERVICE_INSTANCE</pre><br>
<pre class=terminal>$ cf bind-service APP_NAME SERVICE_INSTANCE</pre><br>
<pre class=terminal>$ cf restage-app APP_NAME</pre>

Your app should now communicate securely with the Redis On-Demand Service Instance.
